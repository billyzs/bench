# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake, Ninja on macOS

env:
  CMAKE_VERSION: "3.30.0"
  NINJA_VERSION: "1.12.1"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [macos-latest]
        build_type: [Release]
        c_compiler: [clang]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build-${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"

    - name: Cache Tools Download
      uses: actions/cache@v4.0.2
      with:
        path: |
          - ${{ github.workspace }}/bin
          - ${{ github.workspace }}/bin/cmake-3.30.0-macos-universal/CMake.app/Contents/bin
        key: ${{ runner.os }}-cmake-${{ env.CMAKE_VERSION }}-ninja-${{ env.NINJA_VERSION }}
  
    - name: Tools Download
      if: steps.cache-tools-download.outputs.cache-hit != 'true'
      shell: cmake --debug-output --trace --trace-expand --trace-format=human -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})
        set(CWD $ENV{GITHUB_WORKSPACE})
        set(BIN "${CWD}/bin")
        set(TMP "${CWD}/tmp")

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "windows-x86_64.zip")
          set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
        elseif(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        elseif(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Darwin")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()

        set(cmake_url
            "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}"
        )
        set(cached_cmake_version "mooo")
        if(IS_EXECUTABLE "${BIN}/cmake")
          message(WARNING "using cached cmake")
        else()
          message(WARNING "downloading from ${cmake_url}")
          file(DOWNLOAD "${cmake_url}" "${TMP}/cmake.zip")
          file(
            ARCHIVE_EXTRACT
            INPUT
            "${TMP}/cmake.zip"
            DESTINATION
            ${BIN}
            TOUCH)
          # execute_process(COMMAND ${BIN}/cmake --version OUTPUT_VARIABLE
          # cached_cmake_version ECHO_OUTPUT_VARIABLE COMMAND_ECHO STDOUT)
          if(EXISTS "${BIN}/${cmake_dir}/cmake")
            message(WARNING "cmake downloaded at ${BIN}/${cmake_dir}/cmake")
            file(REMOVE "${BIN}/cmake-gui")
          else()
            message(FATAL_ERROR "cmake download or extract error")
          endif()
        endif()

        # execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./cmake.zip
        # COMMAND_ERROR_IS_FATAL ANY) TODO if file present, skip download
        # file(REMOVE_RECURSE ${BIN})
        set(ninja_url
            "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}"
        )
        # set(cached_ninja_version "") execute_process(COMMAND ${BIN}/ninja --version
        # OUTPUT_VARIABLE cached_ninja_version ECHO_OUTPUT_VARIABLE COMMAND_ECHO STDOUT)
        # if(NOT (${cached_ninja_version} AND ${cached_ninja_version} VERSION_EQUAL
        # ${ninja_version})) if($<NOT:$<AND:cached_ninja_version,$<VERSION_EQUAL
        # ${cached_ninja_version}, ${ninja_version}>>>) if(${cached_ninja_version}
        # STREQUAL "" OR (NOT ${cached_ninja_version} VERSION_EQUAL ${ninja_version}))
        if(IS_EXECUTABLE "${BIN}/${cmake_dir}/ninja")
          message(WARNING "using cached ninja")
        else()
          message(WARNING "downloading from ${ninja_url}")
          file(DOWNLOAD "${ninja_url}" "${TMP}/ninja.zip")
          file(ARCHIVE_EXTRACT INPUT "${TMP}/ninja.zip" DESTINATION "${BIN}" TOUCH)
          file(CHMOD "${BIN}/ninja" PERMISSIONS
          OWNER_READ
          OWNER_WRITE
          OWNER_EXECUTE
          GROUP_READ
          GROUP_EXECUTE
          WORLD_READ
          WORLD_EXECUTE)
          file(COPY "${BIN}/ninja" DESTINATION "${BIN}/${cmake_dir}/ninja")
          if(IS_EXECUTABLE "${BIN}/${cmake_dir}/ninja")
            message(WARNING "downloaded ninja at ${BIN}/${cmake_dir}/ninja")
          else()
            # execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./ninja.zip
            # COMMAND_ERROR_IS_FATAL ANY)
            # execute_process(COMMAND ${BIN}/ninja --version OUTPUT_VARIABLE
            # cached_ninja_version ECHO_OUTPUT_VARIABLE COMMAND_ECHO STDOUT) if(NOT
            # (${cached_ninja_version} AND ${cached_ninja_version} VERSION_EQUAL
            # ${ninja_version}))
            message(FATAL_ERROR "ninja download or extract error")
          endif()
        endif()

        # make everything executable
        file(
          CHMOD_RECURSE
          "${BIN}/${cmake_dir}"
          PERMISSIONS
          OWNER_READ
          OWNER_WRITE
          OWNER_EXECUTE
          GROUP_READ
          GROUP_EXECUTE
          WORLD_READ
          WORLD_EXECUTE)

        # Add to PATH environment variable cmake_path(CONVERT "$ENV{GITHUB_PATH}"
        # TO_CMAKE_PATH_LIST curr_sys_path NORMALIZE) cmake_path(CONVERT
        # "${curr_sys_path}/$ENV{GITHUB_WORKSPACE}" TO_NATIVE_PATH_LIST curr_sys_path
        # NORMALIZE)
        file(TO_CMAKE_PATH "${BIN}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if(${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows")
          set(path_separator ";")
        endif()
        # file(APPEND "$ENV{GITHUB_PATH}"
        # "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")  
        file(APPEND "$ENV{GITHUB_PATH}" "${BIN}${path_separator}${cmake_dir}")


    - name: Configure With Ninja 
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake --fresh -GNinja -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --progress --output-on-failure --schedule-random --build-config ${{ matrix.build_type }}
